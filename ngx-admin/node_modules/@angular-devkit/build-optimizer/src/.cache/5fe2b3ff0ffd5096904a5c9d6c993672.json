{"remainingRequest":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@nebular\\auth\\services\\token\\token.js","dependencies":[{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@nebular\\auth\\services\\token\\token.js","mtime":499162500000},{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1536758963108},{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { urlBase64Decode } from '../../helpers';\r\nvar NbAuthToken = /*@__PURE__*/ (function () {\r\n    function NbAuthToken() {\r\n    }\r\n    NbAuthToken.prototype.getName = function () {\r\n        return this.constructor.NAME;\r\n    };\r\n    return NbAuthToken;\r\n}());\r\nexport { NbAuthToken };\r\nexport function nbAuthCreateToken(tokenClass, token, ownerStrategyName, createdAt) {\r\n    return new tokenClass(token, ownerStrategyName, createdAt);\r\n}\r\nexport function decodeJwtPayload(payload) {\r\n    if (!payload) {\r\n        throw new Error('Cannot extract payload from an empty token.');\r\n    }\r\n    var parts = payload.split('.');\r\n    if (parts.length !== 3) {\r\n        throw new Error(\"The payload \" + payload + \" is not valid JWT payload and must consist of three parts.\");\r\n    }\r\n    var decoded;\r\n    try {\r\n        decoded = urlBase64Decode(parts[1]);\r\n    }\r\n    catch (e) {\r\n        throw new Error(\"The payload \" + payload + \" is not valid JWT payload and cannot be parsed.\");\r\n    }\r\n    if (!decoded) {\r\n        throw new Error(\"The payload \" + payload + \" is not valid JWT payload and cannot be decoded.\");\r\n    }\r\n    return JSON.parse(decoded);\r\n}\r\n/**\r\n * Wrapper for simple (text) token\r\n */\r\nvar NbAuthSimpleToken = /*@__PURE__*/ (function (_super) {\r\n    __extends(NbAuthSimpleToken, _super);\r\n    function NbAuthSimpleToken(token, ownerStrategyName, createdAt) {\r\n        var _this = _super.call(this) || this;\r\n        _this.token = token;\r\n        _this.ownerStrategyName = ownerStrategyName;\r\n        _this.createdAt = createdAt;\r\n        _this.createdAt = _this.prepareCreatedAt(createdAt);\r\n        return _this;\r\n    }\r\n    NbAuthSimpleToken.prototype.prepareCreatedAt = function (date) {\r\n        return date ? date : new Date();\r\n    };\r\n    /**\r\n     * Returns the token's creation date\r\n     * @returns {Date}\r\n     */\r\n    /**\r\n       * Returns the token's creation date\r\n       * @returns {Date}\r\n       */\r\n    NbAuthSimpleToken.prototype.getCreatedAt = /**\r\n       * Returns the token's creation date\r\n       * @returns {Date}\r\n       */\r\n        function () {\r\n            return this.createdAt;\r\n        };\r\n    /**\r\n     * Returns the token value\r\n     * @returns string\r\n     */\r\n    /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n    NbAuthSimpleToken.prototype.getValue = /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n        function () {\r\n            return this.token;\r\n        };\r\n    NbAuthSimpleToken.prototype.getOwnerStrategyName = function () {\r\n        return this.ownerStrategyName;\r\n    };\r\n    NbAuthSimpleToken.prototype.getPayload = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * Is non empty and valid\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n       * Is non empty and valid\r\n       * @returns {boolean}\r\n       */\r\n    NbAuthSimpleToken.prototype.isValid = /**\r\n       * Is non empty and valid\r\n       * @returns {boolean}\r\n       */\r\n        function () {\r\n            return !!this.getValue();\r\n        };\r\n    /**\r\n     * Validate value and convert to string, if value is not valid return empty string\r\n     * @returns {string}\r\n     */\r\n    /**\r\n       * Validate value and convert to string, if value is not valid return empty string\r\n       * @returns {string}\r\n       */\r\n    NbAuthSimpleToken.prototype.toString = /**\r\n       * Validate value and convert to string, if value is not valid return empty string\r\n       * @returns {string}\r\n       */\r\n        function () {\r\n            return !!this.token ? this.token : '';\r\n        };\r\n    NbAuthSimpleToken.NAME = 'nb:auth:simple:token';\r\n    return NbAuthSimpleToken;\r\n}(NbAuthToken));\r\nexport { NbAuthSimpleToken };\r\n/**\r\n * Wrapper for JWT token with additional methods.\r\n */\r\nvar NbAuthJWTToken = /*@__PURE__*/ (function (_super) {\r\n    __extends(NbAuthJWTToken, _super);\r\n    function NbAuthJWTToken() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * for JWT token, the iat (issued at) field of the token payload contains the creation Date\r\n     */\r\n    /**\r\n       * for JWT token, the iat (issued at) field of the token payload contains the creation Date\r\n       */\r\n    NbAuthJWTToken.prototype.prepareCreatedAt = /**\r\n       * for JWT token, the iat (issued at) field of the token payload contains the creation Date\r\n       */\r\n        function (date) {\r\n            var decoded;\r\n            try {\r\n                decoded = this.getPayload();\r\n            }\r\n            finally {\r\n                return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : _super.prototype.prepareCreatedAt.call(this, date);\r\n            }\r\n        };\r\n    /**\r\n     * Returns payload object\r\n     * @returns any\r\n     */\r\n    /**\r\n       * Returns payload object\r\n       * @returns any\r\n       */\r\n    NbAuthJWTToken.prototype.getPayload = /**\r\n       * Returns payload object\r\n       * @returns any\r\n       */\r\n        function () {\r\n            return decodeJwtPayload(this.token);\r\n        };\r\n    /**\r\n     * Returns expiration date\r\n     * @returns Date\r\n     */\r\n    /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n    NbAuthJWTToken.prototype.getTokenExpDate = /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n        function () {\r\n            var decoded = this.getPayload();\r\n            if (!decoded.hasOwnProperty('exp')) {\r\n                return null;\r\n            }\r\n            var date = new Date(0);\r\n            date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\r\n            return date;\r\n        };\r\n    /**\r\n     * Is data expired\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n    NbAuthJWTToken.prototype.isValid = /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n        function () {\r\n            return _super.prototype.isValid.call(this) && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\r\n        };\r\n    NbAuthJWTToken.NAME = 'nb:auth:jwt:token';\r\n    return NbAuthJWTToken;\r\n}(NbAuthSimpleToken));\r\nexport { NbAuthJWTToken };\r\nvar prepareOAuth2Token = function (data) {\r\n    if (typeof data === 'string') {\r\n        try {\r\n            return JSON.parse(data);\r\n        }\r\n        catch (e) { }\r\n    }\r\n    return data;\r\n};\r\nvar Éµ0 = prepareOAuth2Token;\r\n/**\r\n * Wrapper for OAuth2 token whose access_token is a JWT Token\r\n */\r\nvar NbAuthOAuth2Token = /*@__PURE__*/ (function (_super) {\r\n    __extends(NbAuthOAuth2Token, _super);\r\n    function NbAuthOAuth2Token(data, ownerStrategyName, createdAt) {\r\n        if (data === void 0) {\r\n            data = {};\r\n        }\r\n        // we may get it as string when retrieving from a storage\r\n        return _super.call(this, prepareOAuth2Token(data), ownerStrategyName, createdAt) || this;\r\n    }\r\n    /**\r\n     * Returns the token value\r\n     * @returns string\r\n     */\r\n    /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n    NbAuthOAuth2Token.prototype.getValue = /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n        function () {\r\n            return this.token.access_token;\r\n        };\r\n    /**\r\n     * Returns the refresh token\r\n     * @returns string\r\n     */\r\n    /**\r\n       * Returns the refresh token\r\n       * @returns string\r\n       */\r\n    NbAuthOAuth2Token.prototype.getRefreshToken = /**\r\n       * Returns the refresh token\r\n       * @returns string\r\n       */\r\n        function () {\r\n            return this.token.refresh_token;\r\n        };\r\n    /**\r\n     *  put refreshToken in the token payload\r\n      * @param refreshToken\r\n     */\r\n    /**\r\n       *  put refreshToken in the token payload\r\n        * @param refreshToken\r\n       */\r\n    NbAuthOAuth2Token.prototype.setRefreshToken = /**\r\n       *  put refreshToken in the token payload\r\n        * @param refreshToken\r\n       */\r\n        function (refreshToken) {\r\n            this.token.refresh_token = refreshToken;\r\n        };\r\n    /**\r\n     * Returns token payload\r\n     * @returns any\r\n     */\r\n    /**\r\n       * Returns token payload\r\n       * @returns any\r\n       */\r\n    NbAuthOAuth2Token.prototype.getPayload = /**\r\n       * Returns token payload\r\n       * @returns any\r\n       */\r\n        function () {\r\n            if (!this.token || !Object.keys(this.token).length) {\r\n                throw new Error('Cannot extract payload from an empty token.');\r\n            }\r\n            return this.token;\r\n        };\r\n    /**\r\n     * Returns the token type\r\n     * @returns string\r\n     */\r\n    /**\r\n       * Returns the token type\r\n       * @returns string\r\n       */\r\n    NbAuthOAuth2Token.prototype.getType = /**\r\n       * Returns the token type\r\n       * @returns string\r\n       */\r\n        function () {\r\n            return this.token.token_type;\r\n        };\r\n    /**\r\n     * Is data expired\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n    NbAuthOAuth2Token.prototype.isValid = /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n        function () {\r\n            return _super.prototype.isValid.call(this) && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\r\n        };\r\n    /**\r\n     * Returns expiration date\r\n     * @returns Date\r\n     */\r\n    /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n    NbAuthOAuth2Token.prototype.getTokenExpDate = /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n        function () {\r\n            if (!this.token.hasOwnProperty('expires_in')) {\r\n                return null;\r\n            }\r\n            return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\r\n        };\r\n    /**\r\n     * Convert to string\r\n     * @returns {string}\r\n     */\r\n    /**\r\n       * Convert to string\r\n       * @returns {string}\r\n       */\r\n    NbAuthOAuth2Token.prototype.toString = /**\r\n       * Convert to string\r\n       * @returns {string}\r\n       */\r\n        function () {\r\n            return JSON.stringify(this.token);\r\n        };\r\n    NbAuthOAuth2Token.NAME = 'nb:auth:oauth2:token';\r\n    return NbAuthOAuth2Token;\r\n}(NbAuthSimpleToken));\r\nexport { NbAuthOAuth2Token };\r\n/**\r\n * Wrapper for OAuth2 token\r\n */\r\nvar NbAuthOAuth2JWTToken = /*@__PURE__*/ (function (_super) {\r\n    __extends(NbAuthOAuth2JWTToken, _super);\r\n    function NbAuthOAuth2JWTToken() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\r\n     */\r\n    /**\r\n       * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\r\n       */\r\n    NbAuthOAuth2JWTToken.prototype.prepareCreatedAt = /**\r\n       * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\r\n       */\r\n        function (date) {\r\n            var decoded;\r\n            try {\r\n                decoded = this.getAccessTokenPayload();\r\n            }\r\n            finally {\r\n                return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : _super.prototype.prepareCreatedAt.call(this, date);\r\n            }\r\n        };\r\n    /**\r\n     * Returns access token payload\r\n     * @returns any\r\n     */\r\n    /**\r\n       * Returns access token payload\r\n       * @returns any\r\n       */\r\n    NbAuthOAuth2JWTToken.prototype.getAccessTokenPayload = /**\r\n       * Returns access token payload\r\n       * @returns any\r\n       */\r\n        function () {\r\n            return decodeJwtPayload(this.getValue());\r\n        };\r\n    /**\r\n     * Returns expiration date :\r\n     * - exp if set,\r\n     * - super.getExpDate() otherwise\r\n     * @returns Date\r\n     */\r\n    /**\r\n       * Returns expiration date :\r\n       * - exp if set,\r\n       * - super.getExpDate() otherwise\r\n       * @returns Date\r\n       */\r\n    NbAuthOAuth2JWTToken.prototype.getTokenExpDate = /**\r\n       * Returns expiration date :\r\n       * - exp if set,\r\n       * - super.getExpDate() otherwise\r\n       * @returns Date\r\n       */\r\n        function () {\r\n            var accessTokenPayload = this.getAccessTokenPayload();\r\n            if (accessTokenPayload.hasOwnProperty('exp')) {\r\n                var date = new Date(0);\r\n                date.setUTCSeconds(accessTokenPayload.exp);\r\n                return date;\r\n            }\r\n            else {\r\n                return _super.prototype.getTokenExpDate.call(this);\r\n            }\r\n        };\r\n    NbAuthOAuth2JWTToken.NAME = 'nb:auth:oauth2:jwt:token';\r\n    return NbAuthOAuth2JWTToken;\r\n}(NbAuthOAuth2Token));\r\nexport { NbAuthOAuth2JWTToken };\r\nexport { Éµ0 };\r\n//# sourceMappingURL=token.js.map\r\n",null]}
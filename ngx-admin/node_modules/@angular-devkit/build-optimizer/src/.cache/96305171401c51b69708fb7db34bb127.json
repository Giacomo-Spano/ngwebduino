{"remainingRequest":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@nebular\\auth\\strategies\\password\\password-strategy.js","dependencies":[{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@nebular\\auth\\strategies\\password\\password-strategy.js","mtime":499162500000},{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1536758963108},{"path":"C:\\Users\\giaco\\Documents\\nebular\\ngx-admin\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { passwordStrategyOptions } from './password-strategy-options';\n/**\n * The most common authentication provider for email/password strategy.\n *\n * Strategy settings. Note, there is no need to copy over the whole object to change the settings you need.\n * Also, this.getOption call won't work outside of the default options declaration\n * (which is inside of the `NbPasswordAuthStrategy` class), so you have to replace it with a custom helper function\n * if you need it.\n *\n * ```ts\n *export class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n *  name: string;\n *  baseEndpoint? = '/api/auth/';\n *  login?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'login',\n *    method: 'post',\n *    failWhenNoToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n *    defaultMessages: ['You have been successfully logged in.'],\n *  };\n *  register?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    rememberMe: true,\n *    endpoint: 'register',\n *    method: 'post',\n *    failWhenNoToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully registered.'],\n *  };\n *  requestPass?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'request-pass',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Reset password instructions have been sent to your email.'],\n *  };\n *  resetPass?: boolean | NbPasswordStrategyReset = {\n *    endpoint: 'reset-pass',\n *    method: 'put',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    resetPasswordTokenKey: 'reset_password_token',\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your password has been successfully changed.'],\n *  };\n *  logout?: boolean | NbPasswordStrategyReset = {\n *    alwaysFail: false,\n *    endpoint: 'logout',\n *    method: 'delete',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully logged out.'],\n *  };\n *  refreshToken?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'refresh-token',\n *    method: 'post',\n *    failWhenNoToken: true,\n *    redirect: {\n *      success: null,\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your token has been successfully refreshed.'],\n *  };\n *  token?: NbPasswordStrategyToken = {\n *    class: NbAuthSimpleToken,\n *    key: 'data.token',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.token.key,\n *    ),\n *  };\n *  errors?: NbPasswordStrategyMessage = {\n *    key: 'data.errors',\n *    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.error,\n *      options.errors.key,\n *      options[module].defaultErrors,\n *    ),\n *  };\n *  messages?: NbPasswordStrategyMessage = {\n *    key: 'data.messages',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.messages.key,\n *      options[module].defaultMessages,\n *    ),\n *  };\n *  validation?: {\n *    password?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *    email?: {\n *      required?: boolean;\n *      regexp?: string | null;\n *    };\n *    fullName?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *  };\n *}\n * ```\n */\nvar NbPasswordAuthStrategy = /*@__PURE__*/ (function (_super) {\n    __extends(NbPasswordAuthStrategy, _super);\n    function NbPasswordAuthStrategy(http, route) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.route = route;\n        _this.defaultOptions = passwordStrategyOptions;\n        return _this;\n    }\n    NbPasswordAuthStrategy.setup = function (options) {\n        return [NbPasswordAuthStrategy, options];\n    };\n    NbPasswordAuthStrategy.prototype.authenticate = function (data) {\n        var _this = this;\n        var method = this.getOption('login.method');\n        var url = this.getActionEndpoint('login');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption('login.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('login'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('login.redirect.success'), [], _this.getOption('messages.getter')('login', res, _this.options), _this.createToken(_this.getOption('token.getter')('login', res, _this.options)));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('login', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('login.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.register = function (data) {\n        var _this = this;\n        var method = this.getOption('register.method');\n        var url = this.getActionEndpoint('register');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption('register.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('register'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('register.redirect.success'), [], _this.getOption('messages.getter')('register', res, _this.options), _this.createToken(_this.getOption('token.getter')('login', res, _this.options)));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('register', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('register.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.requestPassword = function (data) {\n        var _this = this;\n        var method = this.getOption('requestPass.method');\n        var url = this.getActionEndpoint('requestPass');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption('requestPass.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('requestPass.redirect.success'), [], _this.getOption('messages.getter')('requestPass', res, _this.options));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('requestPass', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('requestPass.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.resetPassword = function (data) {\n        var _this = this;\n        if (data === void 0) {\n            data = {};\n        }\n        var tokenKey = this.getOption('resetPass.resetPasswordTokenKey');\n        data[tokenKey] = this.route.snapshot.queryParams[tokenKey];\n        var method = this.getOption('resetPass.method');\n        var url = this.getActionEndpoint('resetPass');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption('resetPass.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('resetPass.redirect.success'), [], _this.getOption('messages.getter')('resetPass', res, _this.options));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('resetPass', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('resetPass.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.logout = function () {\n        var _this = this;\n        var method = this.getOption('logout.method');\n        var url = this.getActionEndpoint('logout');\n        return observableOf({})\n            .pipe(switchMap(function (res) {\n            if (!url) {\n                return observableOf(res);\n            }\n            return _this.http.request(method, url, { observe: 'response' });\n        }), map(function (res) {\n            if (_this.getOption('logout.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('logout.redirect.success'), [], _this.getOption('messages.getter')('logout', res, _this.options));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('logout', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('logout.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.refreshToken = function (data) {\n        var _this = this;\n        var method = this.getOption('refreshToken.method');\n        var url = this.getActionEndpoint('refreshToken');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getOption('refreshToken.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('refreshToken'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getOption('refreshToken.redirect.success'), [], _this.getOption('messages.getter')('refreshToken', res, _this.options), _this.createToken(_this.getOption('token.getter')('login', res, _this.options)));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getOption('errors.getter')('refreshToken', res, _this.options);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getOption('refreshToken.redirect.failure'), errors));\n        }));\n    };\n    NbPasswordAuthStrategy.prototype.validateToken = function (module) {\n        var _this = this;\n        return map(function (res) {\n            var token = _this.getOption('token.getter')(module, res, _this.options);\n            if (!token && _this.getOption(module + \".failWhenNoToken\")) {\n                var key = _this.getOption('token.key');\n                console.warn(\"NbPasswordAuthStrategy:\\n                          Token is not provided under '\" + key + \"' key\\n                          with getter '\" + _this.getOption('token.getter') + \"', check your auth configuration.\");\n                throw new Error('Could not extract token from the response.');\n            }\n            return res;\n        });\n    };\n    return NbPasswordAuthStrategy;\n}(NbAuthStrategy));\nexport { NbPasswordAuthStrategy };\n//# sourceMappingURL=password-strategy.js.map\n",null]}